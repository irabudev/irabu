{"version":3,"sources":["webpack:///./src/templates/listing.jsx","webpack:///./src/components/PostListing/PostListing.jsx"],"names":["Listing","currentPageNum","pageCount","prevPage","nextPage","isFirstPage","isLastPage","pageContext","postEdges","data","allMarkdownRemark","edges","className","title","config","siteTitle","to","Array","map","_val","index","pageNum","key","listingQuery","PostListing","postList","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","cover","date","excerpt","timeToRead","post"],"mappings":"kRAoDeA,UA3Cf,YAAyC,IAE7BC,EAAgBC,EAClBC,EACAC,EACAC,EACAC,EANSC,EAAqB,EAArBA,YA2BXC,EA3BgC,EAARC,KA2BPC,kBAAkBC,MAEzC,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAQC,MAAOC,IAAOC,YACtB,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAaP,UAAWA,MAjCtBP,EAA8BM,EAA9BN,eAAgBC,EAAcK,EAAdL,UAClBC,EAAWF,EAAiB,GAAM,EAAI,IAA3B,KAAqCA,EAAiB,GAAtD,IACXG,EAAQ,KAAOH,EAAiB,GAAxB,IACRI,EAAiC,IAAnBJ,EACdK,EAAaL,IAAmBC,EAGpC,yBAAKU,UAAU,qBACXP,GAAe,kBAAC,OAAD,CAAMW,GAAIb,GAAV,YAChB,YAAIc,MAAMf,IAAYgB,KAAI,SAACC,EAAMC,GAChC,IAAMC,EAAUD,EAAQ,EACxB,OACE,kBAAC,OAAD,CACEE,IAAG,gBAAkBD,EACrBL,GAAgB,IAAZK,EAAgB,IAAhB,IAA0BA,EAA1B,KAEHA,OAILf,GAAc,kBAAC,OAAD,CAAMU,GAAIZ,GAAV,aAwBjB,IAAMmB,EAAY,c,oCCvDzB,qCA+BeC,IA5Bf,YAAqC,IAAdhB,EAAa,EAAbA,UACfiB,EAAW,GAajB,OAZAjB,EAAUkB,SAAQ,SAACC,GACjBF,EAASG,KAAK,CACZC,KAAMF,EAASG,KAAKC,OAAOC,KAC3BC,KAAMN,EAASG,KAAKI,YAAYD,KAChCE,MAAOR,EAASG,KAAKI,YAAYC,MACjCtB,MAAOc,EAASG,KAAKI,YAAYrB,MACjCuB,KAAMT,EAASG,KAAKC,OAAOK,KAC3BC,QAASV,EAASG,KAAKO,QACvBC,WAAYX,EAASG,KAAKQ,gBAK5B,6BAGIb,EAASP,KAAI,SAACqB,GAAD,OACX,kBAAC,OAAD,CAAMvB,GAAIuB,EAAKV,KAAMP,IAAKiB,EAAK1B,OAC7B,4BAAK0B,EAAK1B,c","file":"component---src-templates-listing-jsx-bf34491d4bcfd04b7d86.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql, Link } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./listing.css\";\n\nfunction Listing({ pageContext, data }) {\n  function renderPaging() {\n    const { currentPageNum, pageCount } = pageContext;\n    const prevPage = currentPageNum - 1 === 1 ? \"/\" : `/${currentPageNum - 1}/`;\n    const nextPage = `/${currentPageNum + 1}/`;\n    const isFirstPage = currentPageNum === 1;\n    const isLastPage = currentPageNum === pageCount;\n\n    return (\n      <div className=\"paging-container\">\n        {!isFirstPage && <Link to={prevPage}>Previous</Link>}\n        {[...Array(pageCount)].map((_val, index) => {\n          const pageNum = index + 1;\n          return (\n            <Link\n              key={`listing-page-${pageNum}`}\n              to={pageNum === 1 ? \"/\" : `/${pageNum}/`}\n            >\n              {pageNum}\n            </Link>\n          );\n        })}\n        {!isLastPage && <Link to={nextPage}>Next</Link>}\n      </div>\n    );\n  }\n\n  const postEdges = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout>\n      <div className=\"listing-container\">\n        <div className=\"posts-container\">\n          <Helmet title={config.siteTitle} />\n          <SEO />\n          <PostListing postEdges={postEdges} />\n        </div>\n        {renderPaging()}\n      </div>\n    </Layout>\n  );\n}\n\nexport default Listing;\n\n/* eslint no-undef: \"off\" */\nexport const listingQuery = graphql`\n  query ListingQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [fields___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nfunction PostListing({ postEdges }) {\n  const postList = [];\n  postEdges.forEach((postEdge) => {\n    postList.push({\n      path: postEdge.node.fields.slug,\n      tags: postEdge.node.frontmatter.tags,\n      cover: postEdge.node.frontmatter.cover,\n      title: postEdge.node.frontmatter.title,\n      date: postEdge.node.fields.date,\n      excerpt: postEdge.node.excerpt,\n      timeToRead: postEdge.node.timeToRead,\n    });\n  });\n\n  return (\n    <div>\n      {\n        /* Your post list here. */\n        postList.map((post) => (\n          <Link to={post.path} key={post.title}>\n            <h1>{post.title}</h1>\n          </Link>\n        ))\n      }\n    </div>\n  );\n}\n\nexport default PostListing;\n"],"sourceRoot":""}